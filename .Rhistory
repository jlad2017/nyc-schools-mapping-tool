schools_vis$popup <- paste('Name: ', schools_vis$school_name,  '<br/>',
'Economic Need Index: ', schools_vis$economic_need_index, '% <br/>',
'% Asian: ', schools_vis$p_asian,  '<br/>',
'% Black: ', schools_vis$p_black,  '<br/>',
'% Hispanic: ', schools_vis$p_hispanic,  '<br/>',
'% Native American: ', schools_vis$p_native_american,  '<br/>',
'% White: ', schools_vis$p_white,  '<br/>',
'% Multi-Racial: ', schools_vis$p_multi_racial,  '<br/>',
'% Students with Disabilities: ', schools_vis$p_students_with_disabilities,  '<br/>',
'% English Language Learners: ', schools_vis$p_english_language_learners)
schools_pal <- colorNumeric(palette='Blues', domain=schools_vis$economic_need_index)
map <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron)
if (area_category == 'aq') {
area_pal <- colorNumeric(palette='YlOrRd', domain=aq_by_uhf_sp$air_quality_measure)
map <- map %>%
addPolygons(data         = aq_by_uhf_sp,
stroke       = TRUE,
color        = '#808080',
weight       = 1,
fillOpacity  = 0.5,
fillColor    = ~area_pal(aq_by_uhf_sp$air_quality_measure),
popup        = ~paste('UHF Neighborhood: ', aq_by_uhf_sp$uhf_neigh, '<br/>',
'Air Quality Measure: ', aq_by_uhf_sp$air_quality_measure)) %>%
addLegend(data   = aq_by_uhf_sp,
pal    = area_pal,
values = ~aq_by_uhf_sp$air_quality_measure,
title  = 'Air Quality (PM2.5 mcg/m3)')
} else {
area_pal <- colorNumeric(palette='YlOrRd', domain=er_by_modzcta_sp$p_pne_a)
map <- map %>%
addPolygons(data         = er_by_modzcta_sp,
stroke       = TRUE,
color        = '#808080',
weight       = 1,
fillOpacity  = 0.5,
fillColor    = ~area_pal(er_by_modzcta_sp$n_pne_a),
popup        = ~paste('Pneumonia Admissions per Capita: ',
format(round(er_by_modzcta_sp$p_pne_a, 2), nsmall=2),
'<br/>',
'# Pneumonia Admissions: ', er_by_modzcta_sp$n_pne_a, '<br/>',
'Total ED Visits: ', er_by_modzcta_sp$t_ed_v, '<br/>',
'Estimated Population: ', er_by_modzcta_sp$pop_est)) %>%
addLegend(data   = er_by_modzcta_sp,
pal    = area_pal,
values = ~er_by_modzcta_sp$p_pne_a,
title  = 'Pneumonia Admissions <br> per Capita')
}
map <- map %>%
addCircleMarkers(data   = schools_vis,
lng    = ~longitude,
lat    = ~latitude,
radius = ~logb(total_enrollment/max(schools_vis$total_enrollment), base=0.1) * 5,
color  = ~schools_pal(schools_vis$economic_need_index),
stroke = FALSE,
fillOpacity = 0.8,
popup  = ~schools_vis$popup) %>%
addLegend(data   = schools_vis,
pal    = schools_pal,
values = ~schools_vis$economic_need_index,
title  = 'Economic Need <br> Index (%)')
map
}
# get_static_map('High school', zoom=13)
get_interactive_map('High school', 'er')
get_interactive_map <- function(school_category, area_category) {
# area category: aq, er
schools_vis <- schools %>%
filter(location_category_description == school_category)
schools_vis$popup <- paste('Name: ', schools_vis$school_name,  '<br/>',
'Economic Need Index: ', schools_vis$economic_need_index, '% <br/>',
'% Asian: ', schools_vis$p_asian,  '<br/>',
'% Black: ', schools_vis$p_black,  '<br/>',
'% Hispanic: ', schools_vis$p_hispanic,  '<br/>',
'% Native American: ', schools_vis$p_native_american,  '<br/>',
'% White: ', schools_vis$p_white,  '<br/>',
'% Multi-Racial: ', schools_vis$p_multi_racial,  '<br/>',
'% Students with Disabilities: ', schools_vis$p_students_with_disabilities,  '<br/>',
'% English Language Learners: ', schools_vis$p_english_language_learners)
schools_pal <- colorNumeric(palette='Blues', domain=schools_vis$economic_need_index)
map <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron)
if (area_category == 'aq') {
area_pal <- colorNumeric(palette='YlOrRd', domain=aq_by_uhf_sp$air_quality_measure)
map <- map %>%
addPolygons(data         = aq_by_uhf_sp,
stroke       = TRUE,
color        = '#808080',
weight       = 1,
fillOpacity  = 0.5,
fillColor    = ~area_pal(aq_by_uhf_sp$air_quality_measure),
popup        = ~paste('UHF Neighborhood: ', aq_by_uhf_sp$uhf_neigh, '<br/>',
'Air Quality Measure: ', aq_by_uhf_sp$air_quality_measure)) %>%
addLegend(data   = aq_by_uhf_sp,
pal    = area_pal,
values = ~aq_by_uhf_sp$air_quality_measure,
title  = 'Air Quality (PM2.5 mcg/m3)')
} else {
area_pal <- colorNumeric(palette='YlOrRd', domain=er_by_modzcta_sp$p_pne_a)
map <- map %>%
addPolygons(data         = er_by_modzcta_sp,
stroke       = TRUE,
color        = '#808080',
weight       = 1,
fillOpacity  = 0.5,
fillColor    = ~area_pal(er_by_modzcta_sp$p_pne_a),
popup        = ~paste('Pneumonia Admissions per Capita: ',
format(round(er_by_modzcta_sp$p_pne_a, 2), nsmall=2),
'<br/>',
'# Pneumonia Admissions: ', er_by_modzcta_sp$n_pne_a, '<br/>',
'Total ED Visits: ', er_by_modzcta_sp$t_ed_v, '<br/>',
'Estimated Population: ', er_by_modzcta_sp$pop_est)) %>%
addLegend(data   = er_by_modzcta_sp,
pal    = area_pal,
values = ~er_by_modzcta_sp$p_pne_a,
title  = 'Pneumonia Admissions <br> per Capita')
}
map <- map %>%
addCircleMarkers(data   = schools_vis,
lng    = ~longitude,
lat    = ~latitude,
radius = ~logb(total_enrollment/max(schools_vis$total_enrollment), base=0.1) * 5,
color  = ~schools_pal(schools_vis$economic_need_index),
stroke = FALSE,
fillOpacity = 0.8,
popup  = ~schools_vis$popup) %>%
addLegend(data   = schools_vis,
pal    = schools_pal,
values = ~schools_vis$economic_need_index,
title  = 'Economic Need <br> Index (%)')
map
}
# get_static_map('High school', zoom=13)
get_interactive_map('High school', 'er')
shiny::runApp('Desktop/life/nyc/nyc-schools-and-areas')
shiny::runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
# Load data
schools <- as_tibble(read_csv('~/Desktop/life/nyc/data/schools.csv'))
aq_by_uhf_sp <- rgdal::readOGR('~/Desktop/life/nyc/data/aq_by_uhf', layer='aq_by_uhf_sp')
er_by_modzcta_sp <- rgdal::readOGR('~/Desktop/life/nyc/data/er_by_modzcta', layer='er_by_modzcta_sp')
# Create base map
school_category_options <- c(
'Elementary',
'K-8',
'High school',
'Junior High-Intermediate-Middle',
'Secondary School',
'K-12 all grades',
'Early Childhood',
'Ungraded'
)
school_dem_options <- c(
'p_female',
'p_male',
'p_asian',
'p_black',
'p_hispanic',
'p_multi_racial',
'p_native_american',
'p_white',
'p_students_with_disabilities',
'p_english_language_learners',
'poverty',
'economic_need_index'
)
area_options <- c(
'air_q',
'n_pne_v',
'n_pne_a',
'p_pne_v',
'p_pne_a'
)
get_school_palette <- function(data, value=school_dem_options) {
colorNumeric(palette='Blues', domain=data$value)
}
get_area_palette <- function(data, value=area_options) {
colorNumeric(palette='Oranges', domain=data$value)
}
map <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel('Map of NYC Schools and Environment'),
selectInput('demographic', label='School Demographic', choices=ls('a', 'b')),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
?selectInput
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
colnames(sschools)
colnames(schools)
school_dem_display_options <- c(
'% Female',
'% Female',
'% Female',
'% Female',
'% Female',
)
'% Female',area_options <- c(
'air_q',
'n_pne_v',
'n_pne_a',
'p_pne_v',
'p_pne_a'
)
vget_school_palette <- function(data, value=school_dem_options) {
colorNumeric(palette='Blues', domain=data$value)
}
school_dem_display_options <- c(
'% Female',
'% Female',
'% Female',
'% Female',
'% Female',
'% Female',
'% Female',
'% Female',
'% Female',
'% Female',
)
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
?leafletOutput
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp()
runApp()
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp()
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp()
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp()
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
traceback()
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(data         = aq_by_uhf_sp,
stroke       = TRUE,
color        = '#808080',
weight       = 1,
fillOpacity  = 0.5,
# fillColor    = ~area_pal()(aq_by_uhf_sp$air_quality_measure),
popup        = ~paste('UHF Neighborhood: ', aq_by_uhf_sp$uhf_neigh, '<br/>',
'Air Quality Measure: ', aq_by_uhf_sp$air_quality_measure))
runApp()
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
View(aq_by_uhf_sp)
View(aq_by_uhf_sp)
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp()
runApp('Desktop/life/nyc/nyc-schools-and-areas')
View(schools)
View(schools)
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
View(schools)
View(schools)
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp()
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
View(schools)
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
?selectInput
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp()
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp()
runApp()
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp()
runApp()
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp()
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
?reactive
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp()
runApp()
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp()
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
install.packages('shinyWidgets')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
typeof(colnames)
typeof(colnames(modzcta))
colnames(modzcta)
typeof(names(modzcta))
columns(modzcta)
colnames(modzcta)[1]
?grep
names <- colnames(modzcta)
names[grep('pop'),names]
names[grep('pop',names()]
names[grep('pop',names)]
names[grep('e',names)]
colnames_w_percent <- colnames(demographic)[grep('%', colnames(demographic))]
colnames_w_percent
source("~/Desktop/life/nyc/data-processing.R", echo=TRUE)
for (name in colnames_w_percent) {
demographic[[name]] <- demographic[[name]] %>%
str_replace('%', '') %>%
str_replace('.*[ ]', '') %>%
as.double()
}
runApp('Desktop/life/nyc/nyc-schools-and-areas')
runApp('Desktop/life/nyc/nyc-schools-and-areas')
shiny::runApp('Desktop/life/nyc')
runApp('Desktop/life/nyc')
runApp('Desktop/life/nyc')
?tags#a
?tags$a
runApp('Desktop/life/nyc')
runApp('Desktop/life/nyc')
runApp('Desktop/life/nyc')
# -------------
# DATA SOURCES
# -------------
# School demographic: https://infohub.nyced.org/reports/school-quality/information-and-data-overview
# School locations: https://data.cityofnewyork.us/Education/2019-2020-School-Locations/wg9x-4ke6
# UHF GeoJSONs: https://gist.github.com/miguelpaz/edbc79fc55447ae736704654b3b2ef90
# Air quality: https://data.cityofnewyork.us/Environment/Air-Quality/c3uy-2p5r
# ER visits: https://data.cityofnewyork.us/Health/Emergency-Department-Visits-and-Admissions-for-Inf/2nwg-uqyg
# -------------
library(tidyverse)
runApp('Desktop/life/nyc')
deployApp()
rsconnect::deployApp()
runApp('Desktop/life/nyc')
runApp('Desktop/life/nyc')
runApp('Desktop/life/nyc')
source("~/Desktop/life/nyc/scripts/data-processing.R", echo=TRUE)
source("~/Desktop/life/nyc/scripts/data-processing.R", echo=TRUE)
runApp('Desktop/life/nyc')
rsconnect::deployApp()
shiny::runApp('Desktop/life/nyc')
shiny::runApp('Desktop/life/nyc')
install.packages('plot_ly')
install.packages('plotly')
install.packages('plotly')
readLines("http://google.com")
install.packages("plotly")
devtools::install_github("ropensci/plotly")
install.packages('plotly')
max(schools[names][1,])
names <- clean_name(school_dem_display_options)
clean_name <- function(n) {
n <- gsub('%+', 'p', n)
n <- gsub('#+', 'n', n)
n <- gsub("[^a-zA-Z0-9_]+", "_", n)
n <- tolower(trimws(n))
n
}
names <- clean_name(school_dem_display_options)
school_dem_display_options <- c(
'Economic Need Index',
'% Poverty',
'% Female',
'% Male',
'% Asian',
'% Black',
'% Hispanic',
'% Multi-Racial',
'% Native American',
'% White',
'% Students with Disabilities',
'% English Language Learners'
)
names <- clean_name(school_dem_display_options)
schools[names]
names
schools
schools[school_dem_display_options]
# Load data
schools <- as_tibble(read_csv('./data/schools.csv'))
library(shiny)
library(shinyWidgets)
library(tidyverse)
library(leaflet)
library(htmlTable)
library(plotly)
clean_name <- function(n) {
n <- gsub('%+', 'p', n)
n <- gsub('#+', 'n', n)
n <- gsub("[^a-zA-Z0-9_]+", "_", n)
n <- tolower(trimws(n))
n
}
# Load data
schools <- as_tibble(read_csv('./data/schools.csv'))
# Load data
schools <- as_tibble(read_csv('./data/schools.csv'))
setwd("~/Desktop/life/nyc")
# Load data
schools <- as_tibble(read_csv('./data/schools.csv'))
schools[names]
max(schools[names][1,])
runApp()
runApp()
?plot_ly
runApp()
runApp()
runApp()
runApp()
school_dem_display_options
runApp()
runApp()
